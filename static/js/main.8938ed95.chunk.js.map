{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","completed","id","classNames","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","initialTodos","App","useState","setTodos","selectedUserId","setSelectedUserId","errorTitle","setErrorTitle","errorUser","setErrorUser","setTitle","action","method","onSubmit","event","preventDefault","trim","newTodo","Math","max","prevTodo","htmlFor","type","value","onChange","target","replace","placeholder","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8938ed95.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\nexport type Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC <Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n        data-id={todo.id}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(userId: number): User | null {\n  const foundUser = usersFromServer.find((user) => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst initialTodos = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(initialTodos);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [errorTitle, setErrorTitle] = useState(false);\n  const [errorUser, setErrorUser] = useState(false);\n  const [title, setTitle] = useState('');\n\n  const handleClear = () => {\n    setTitle('');\n    setSelectedUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim() || !selectedUserId) {\n      setErrorTitle(!title.trim());\n      setErrorUser(!selectedUserId);\n\n      return;\n    }\n\n    if (title.trim() && selectedUserId) {\n      const newTodo: Todo = {\n        id: Math.max(...todos.map((todo) => todo.id)) + 1,\n        userId: selectedUserId,\n        title,\n        completed: false,\n        user: getUserById(selectedUserId),\n      };\n\n      setTodos((prevTodo => [...prevTodo, newTodo]));\n\n      handleClear();\n    }\n  };\n\n  const handleChangeTittle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitle(value);\n    setErrorTitle(false);\n\n    setTitle(value.replace(/[^A-Za-z\\s\\d\\u0400-\\u04FF]/g, ''));\n  };\n\n  const handleChangeUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUserId(Number(value));\n    setErrorUser(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={title}\n              onChange={handleChangeTittle}\n              placeholder=\"Enter a title\"\n            />\n          </label>\n\n          {errorTitle && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">\n            User:\n            <select\n              data-cy=\"userSelect\"\n              id=\"userSelect\"\n              placeholder=\"Choose a user\"\n              value={selectedUserId}\n              onChange={handleChangeUser}\n            >\n              <option value=\"0\">\n                Choose a user\n              </option>\n\n              {usersFromServer.map(({ name, id }) => (\n                <option value={id} key={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {errorUser && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}